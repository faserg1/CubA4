OpCapability Shader
OpCapability Geometry
OpCapability Int64
OpMemoryModel Logical Simple

OpEntryPoint Geometry %main "main"

; !!!!!!!!!!! debug namings
OpName %v_outPos "output_vertex"
OpName %v_outUVW "output_uvw"
; !!!!!!!!!!! decorations

; input/output
OpDecorate %v_outPos BuiltIn Position
OpDecorate %v_outUVW Location 1
; built in
; structure types
; uniform buffers
; spec ids

OpDecorate %chunk_size_const SpecId 0

; !!!!!!!!!!! types

; basic types

%type_void = OpTypeVoid ; void
%type_bool = OpTypeBool ; void
%type_int_32 = OpTypeInt 32 1 ; int 32 signed
%type_uint_32 = OpTypeInt 32 0 ; int 32 unsigned
%type_float_32 = OpTypeFloat 32 ; float
%type_int_64 = OpTypeInt 64 1 ; int 64 signed

; vector types

%type_vec3_uint_32 = OpTypeVector %type_uint_32 3 ; int64 x3
%type_vec3_int_64 = OpTypeVector %type_int_64 3 ; int64 x3
%type_vec4_int_64 = OpTypeVector %type_int_64 4 ; int64 x4
%type_vec3_float_32 = OpTypeVector %type_float_32 3 ; float x3
%type_vec4_float_32 = OpTypeVector %type_float_32 4 ; float x4

; matrix types

%type_mat4x4_float_32 = OpTypeMatrix %type_vec4_float_32 4 ; float 4x4

; array types
%type_runtime_array_vec3_uint_32 = OpTypeRuntimeArray %type_vec3_uint_32

; struct types

%type_matrix_struct = OpTypeStruct %type_vec3_int_64 %type_mat4x4_float_32 %type_mat4x4_float_32 ; struct: view_global_pos view projection
%type_chunk_range_struct = OpTypeStruct %type_runtime_array_vec3_uint_32
%type_push_struct = OpTypeStruct %type_vec3_int_64 %type_int_32

; function types

%func_void = OpTypeFunction %type_void ; void ()
%func_vec3_float_32 = OpTypeFunction %type_vec3_float_32 ; vec3_float_32 ()
%func_vec3_uint_32 = OpTypeFunction %type_vec3_uint_32 %type_uint_32 ; vec3_uint_32 (uint_32)

; !!!!!!!!!!! pointers

; vectors 
%p_vec4_float_32_in = OpTypePointer Input %type_vec4_float_32 ; pointer to input float
%p_vec3_float_32_in = OpTypePointer Input %type_vec3_float_32 ; pointer to input float
%p_vec4_float_32_out = OpTypePointer Output %type_vec4_float_32 ; pointer to output float
%p_vec3_float_32_out = OpTypePointer Output %type_vec3_float_32 ; pointer to output float

; uniform
%p_matrix_struct_uniform = OpTypePointer UniformConstant %type_matrix_struct
%p_mat4x4_float_32_uniform = OpTypePointer UniformConstant %type_mat4x4_float_32
%p_vec3_int64_uniform = OpTypePointer UniformConstant %type_vec3_int_64

%p_chunk_range_struct_uniform = OpTypePointer UniformConstant %type_chunk_range_struct
%p_runtime_array_vec3_uint_32_uniform = OpTypePointer UniformConstant %type_runtime_array_vec3_uint_32
%p_vec3_uint_32_uniform = OpTypePointer UniformConstant %type_vec3_uint_32 ; pointer to uniform float

;push constants
%p_vec3_int64_push = OpTypePointer PushConstant %type_vec3_int_64
%p_int32_push = OpTypePointer PushConstant %type_int_32
%p_push_struct = OpTypePointer PushConstant %type_push_struct

; function

%p_uint_32_function = OpTypePointer Function %type_uint_32


; !!!!!!!!!!! constants

%const_uint32_0 = OpConstant %type_uint_32 0
%const_uint32_1 = OpConstant %type_uint_32 1
%const_uint32_2 = OpConstant %type_uint_32 2

; Placeholders

%const_zero_int64 = OpConstant %type_int_64 0
%const_zero_float32 = OpConstant %type_float_32 0
%const_one_float32 = OpConstant %type_float_32 1
%const_two_float32 = OpConstant %type_float_32 2
%const_minus_one_float32 = OpConstant %type_float_32 -1

; Размер одного элемента chunk range
%chunk_range_element_size = OpConstant %type_uint_32 12; uint_32 (32 / 8 = 4) * 3 = 12

; Единичный вектор
%const_vec3_uint32_1_1_1 = OpConstantComposite %type_vec3_uint_32 %const_uint32_1 %const_uint32_1 %const_uint32_1

; !!!!!!!!!!! Spec constants

%chunk_size_const = OpSpecConstant %type_int_32 1

; !!!!!!!!!!! vars

; !!!!!!!!!!! program

%main = OpFunction %type_void None %func_void ;main
%main_begin = OpLabel
; !!!! main function block going here

; !!!! main function block done here
OpReturn
OpFunctionEnd ;main